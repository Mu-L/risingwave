- sql: |
    create materialized view mv1 as select country from t;
    select * from mv1;
  create_source:
    row_format: protobuf
    name: t
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: mv1, columns: [country] }
  stream_plan: |
    StreamMaterialize { columns: [country, _row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamTableScan { table: mv1, columns: [country, _row_id#0], pk_indices: [1] }
- sql: |
    create materialized view v as select t.* from t;
    select (v).country.city,(v.country).address,(country).city.address from v;
  create_source:
    row_format: protobuf
    name: t
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchProject { exprs: [$1, $0, $2], expr_alias: [country.city, country.address, country.city.address] }
        BatchScan { table: v, columns: [country.address, country.city, country.city.address] }
  stream_plan: |
    StreamMaterialize { columns: [country.city, country.address, country.city.address, _row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamProject { exprs: [$1, $0, $2, $3], expr_alias: [country.city, country.address, country.city.address,  ] }
        StreamTableScan { table: v, columns: [country.address, country.city, country.city.address, _row_id#0], pk_indices: [3] }
- sql: |
    create materialized view v as select * from t;
    select (v).country1.city.*,(v.country2).*,(country3).city.* from v;
  create_source:
    row_format: protobuf
    name: t
    file: |
      syntax = "proto3";
      package test;
      message TestRecord {
        int32 id = 1;
        Country country1 = 3;
        Country country2 = 3;
        Country country3 = 3;
        int64 zipcode = 4;
        float rate = 5;
      }
      message Country {
        string address = 1;
        City city = 2;
        string zipcode = 3;
      }
      message City {
        string address = 1;
        string zipcode = 2;
      }
  batch_plan: |
    BatchExchange { order: [], dist: Single }
      BatchScan { table: v, columns: [country1.city.address, country1.city.zipcode, country2.address, country2.city, country2.city.address, country2.city.zipcode, country2.zipcode, country3.city.address, country3.city.zipcode] }
  stream_plan: |
    StreamMaterialize { columns: [country1.city.address, country1.city.zipcode, country2.address, country2.city, country2.city.address, country2.city.zipcode, country2.zipcode, country3.city.address, country3.city.zipcode, _row_id#0(hidden)], pk_columns: [_row_id#0] }
      StreamTableScan { table: v, columns: [country1.city.address, country1.city.zipcode, country2.address, country2.city, country2.city.address, country2.city.zipcode, country2.zipcode, country3.city.address, country3.city.zipcode, _row_id#0], pk_indices: [9] }
